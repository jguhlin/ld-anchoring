;; gorilla-repl.fileformat = 1

;; **
;;; # Gorilla REPL
;;; 
;;; Welcome to gorilla :-)
;;; 
;;; Shift + enter evaluates code. Hit alt+g twice in quick succession or click the menu icon (upper-right corner) for more commands ...
;;; 
;;; It's a good habit to run each worksheet in its own namespace: feel free to use the declaration we've provided below if you'd like.
;; **

;; @@
(ns snowy-meadow
  (:require [gorilla-plot.core :as plot]))

(use 'clojure.core.matrix)
(use 'clojure.core.matrix.operators) 
(set-current-implementation :vectorz)

(use 'incanter.stats)

(import 'htsjdk.variant.bcf2.BCF2Codec)

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-class'>htsjdk.variant.bcf2.BCF2Codec</span>","value":"htsjdk.variant.bcf2.BCF2Codec"}
;; <=

;; @@
(def contig (matrix [
                 [0 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1]
                 [0 0 0 0 0 1 1 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 1]
                 [0 0 0 0 -1 1 -1 0 0 1 1 1 2 0 1 1 0 0 1 1 1 1 1 1 1 1 1]
                 [0 0 0 0 0 1 1 0 1 1 1 1 -1 0 1 1 0 0 1 1 1 1 0 1 1 0 0]
                 [1 1 0 1 0 1 1 0 -1 0 1 1 2 1 0 1 0 1 1 0 0 1 0 0 1 1 0]
                 [1 1 0 1 0 1 1 0 -1 0 1 1 2 1 0 1 0 1 1 0 0 1 0 0 1 1 0]
                 ]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;snowy-meadow/contig</span>","value":"#'snowy-meadow/contig"}
;; <=

;; **
;;; ## Import VCF Files
;;; Chr's are just contigs split where the NNNN's are... need to handle this by parsing FASTA file
;; **

;; @@
(def bcf (BCF2Codec.))
(.canDecode bcf "/home/joseph/filtered-set-2014Apr12.bcf")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>false</span>","value":"false"}
;; <=

;; **
;;; ## Calculate
;; **

;; @@
; Only handle bi-allelic sites, and no unknowns / missing data
(defn one-or-zero [x]
  (or
    (= x 0.0)
    (= x 1.0)))

(defn calculate-acceptable-obs [x y]
  (let [M (transpose
            (matrix
              (filter 
                identity
                (for [i (rows (transpose (matrix [x y])))]
                  (if (every? one-or-zero i)
                    i)))))]
    (second (shape M))))

(defn calculate-acceptable-obs-diagonal [M]
  (for [i (range (first (shape M)))]
    (calculate-acceptable-obs (get-row M i) (get-row M i))))
  
(defn calculate-ld [x y]
  (let [M (transpose
            (matrix
              (filter 
                identity
                (for [i (rows (transpose (matrix [x y])))]
                  (if (every? one-or-zero i)
                    i)))))]
    [(correlation (get-row M 0) (get-row M 1)) (second (shape M))]))

(defn calculate-pairwise-ld [M]
  (let [row-count (first (shape M))]
    (let [correlations (mutable
                         (diagonal-matrix (repeat row-count 1)))
          observations (mutable
                         (diagonal-matrix (calculate-acceptable-obs-diagonal M)))]
      (doall
        (for [i (range row-count)
              j (range (inc i) row-count)]
        (let [[corr obs] (calculate-ld (get-row M i) (get-row M j))]
          [corr obs 1]
          (mset! correlations i j corr)
          (mset! observations i j obs))))
      
      [correlations observations])))
  
  
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;snowy-meadow/calculate-pairwise-ld</span>","value":"#'snowy-meadow/calculate-pairwise-ld"}
;; <=

;; @@
(first (calculate-pairwise-ld M))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>#vectorz/matrix [[1.0,0.9999999999999999,0.9999999999999997,0.6953288019758298,0.006715191366878188,0.006715191366878188],\n[0.0,1.0,0.9999999999999997,0.6953288019758298,0.006715191366878188,0.006715191366878188],\n[0.0,0.0,1.0,0.6693419514856721,-0.08807048459279794,-0.08807048459279794],\n[0.0,0.0,0.0,1.0,0.11613144917081454,0.11613144917081454],\n[0.0,0.0,0.0,0.0,1.0,1.0],\n[0.0,0.0,0.0,0.0,0.0,1.0]]</span>","value":"#vectorz/matrix [[1.0,0.9999999999999999,0.9999999999999997,0.6953288019758298,0.006715191366878188,0.006715191366878188],\n[0.0,1.0,0.9999999999999997,0.6953288019758298,0.006715191366878188,0.006715191366878188],\n[0.0,0.0,1.0,0.6693419514856721,-0.08807048459279794,-0.08807048459279794],\n[0.0,0.0,0.0,1.0,0.11613144917081454,0.11613144917081454],\n[0.0,0.0,0.0,0.0,1.0,1.0],\n[0.0,0.0,0.0,0.0,0.0,1.0]]"}
;; <=

;; @@

;; @@
